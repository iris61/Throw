{"version":3,"sources":["../../../../../../assets/script/modules/play/assets/script/modules/play/KnifeControlComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/script/modules/play","sourcesContent":["import BoardControlComponent, { NODE_NAME_BOARD } from \"./BoardControlComponent\";\nimport PlayStageControlComponent, { NODE_NAME_BACKGROUND } from \"./PlayStageControlComponent\";\nimport ResourceUtil from \"../../utils/ResourceUtil\";\nimport JSInterfaceUtils from \"../bridge/JSInterfaceUtils\";\nimport StorageUtils from \"../../utils/StorageUtils\";\nimport { Constants } from \"../../Constants\";\n\nconst { ccclass, property } = cc._decorator;\n\nconst GROUP_NAME_DEFAULT = \"default\";\n\nconst EPS = 0.000001;\n\nconst READY_ANIMATION_DURATION = 0.24;\nconst READY_ANIMATION_FLYING_DISTANCE = 100;\n\nconst FLYING_DURATION = 0.08;\n\nconst TAG_APPLE = 3;\nconst TAG_KNIFE_HEAD = 1;\n\nconst THROWABLE_OPACITY_THRESHOLD = 100;\n\nconst enum KnifeState {\n    STATE_HIDDEN = 0,\n    STATE_READYING = 1,\n    STATE_READY = 2,\n    STATE_FLYING = 3,\n    STATE_INSERTING = 4,\n    STATE_INSERTED = 5,\n    STATE_BOUNCE_BACK = 6,\n    STATE_ROTATING = 7,\n    STATE_FALLING = 8,\n}\n\n@ccclass\nexport default class KnifeControlComponent extends cc.Component {\n\n    @property(cc.AudioClip)\n    knifeHitAudio: cc.AudioClip = null;\n\n    public stageNode: cc.Node = null;\n    public boardContainerNode: cc.Node = null;\n\n    public knifeRealLength: number = 355;\n    public knifeInsertLength: number = 170;\n\n    private state: KnifeState = KnifeState.STATE_HIDDEN;\n\n    private remainFlyingDistance: number = 0;\n    private remainDeltaOpacity: number = 0;\n    private flyingSpeed: number = 1200;\n    private currentGoAheadDistance: number = 0;\n    private bounceAngle: number = 0;\n\n    private rotateTime: number = 0;\n    private totalRotateTime: number = 0.2;\n\n    private throwable: boolean = false;\n    private isLastKnife: boolean = false;\n    private hasAddedToBoardNode: boolean = false;\n    private firstFrameOfInserted: boolean = true;\n\n    public reset() {\n        this.state = KnifeState.STATE_HIDDEN;\n        this.remainFlyingDistance = 0;\n        this.remainDeltaOpacity = 0;\n        this.flyingSpeed = 1500;\n        this.currentGoAheadDistance = 0;\n        this.bounceAngle = 0;\n        this.rotateTime = 0;\n        this.totalRotateTime = 0.2;\n\n        this.throwable = false;\n        this.isLastKnife = false;\n        this.hasAddedToBoardNode = false;\n        this.firstFrameOfInserted = true;\n\n        this.node.rotation = 0;\n        this.node.setAnchorPoint(0.5, 0);\n        this.node.removeFromParent();\n    }\n\n    onLoad() {\n        cc.log(\"KnifeControlComponent onLoad\");\n    }\n\n    start() {\n    }\n\n    update(dt) {\n        if (this.remainDeltaOpacity > EPS) {\n            let dtOpacity = 255 / READY_ANIMATION_DURATION * dt;\n            if (dtOpacity > this.remainDeltaOpacity) {\n                dtOpacity = this.remainDeltaOpacity;\n            }\n            this.node.opacity += dtOpacity;\n            this.remainDeltaOpacity -= dtOpacity;\n        }\n\n        switch (this.state) {\n\n            case KnifeState.STATE_HIDDEN: {\n                break;\n            }\n\n            case KnifeState.STATE_READYING: {\n                let dtY = READY_ANIMATION_FLYING_DISTANCE / READY_ANIMATION_DURATION * dt;\n                if (dtY > this.remainFlyingDistance) {\n                    dtY = this.remainFlyingDistance;\n                }\n                this.goAhead(dtY);\n                this.remainFlyingDistance -= dtY;\n\n                if (this.node.opacity > THROWABLE_OPACITY_THRESHOLD) {\n                    this.throwable = true;\n                }\n\n                if (this.remainFlyingDistance < EPS) {\n                    this.state = KnifeState.STATE_READY;\n                }\n\n                break;\n            }\n\n            case KnifeState.STATE_READY: {\n                break;\n            }\n\n            case KnifeState.STATE_FLYING: {\n                let dtY = Math.min(this.flyingSpeed * dt, this.remainFlyingDistance + this.knifeInsertLength);\n                this.goAhead(dtY);\n                this.remainFlyingDistance -= dtY;\n                if (this.remainFlyingDistance < EPS) {\n                    this.remainFlyingDistance += this.knifeInsertLength;\n                    this.state = KnifeState.STATE_INSERTING;\n                }\n\n                break;\n            }\n\n            case KnifeState.STATE_INSERTING: {\n                if (!this.hasAddedToBoardNode) {\n                    this.insertIntoBoard();\n                    this.hasAddedToBoardNode = true;\n                }\n\n                let distance = this.flyingSpeed * dt;\n                if (distance > this.remainFlyingDistance) {\n                    distance = this.remainFlyingDistance;\n                }\n\n                this.goAhead(distance);\n\n                this.remainFlyingDistance -= distance;\n\n                if (this.remainFlyingDistance < EPS) {\n                    this.state = KnifeState.STATE_INSERTED;\n                }\n\n                break;\n            }\n\n            case KnifeState.STATE_INSERTED: {\n                if (this.firstFrameOfInserted) {\n                    this.stageNode.getComponent(PlayStageControlComponent).onKnifeInserted();\n                    if (!this.isLastKnife) {\n                        // this.boardContainerNode.getComponent(BoardControlComponent).onKnifeInserted();\n                    } else {\n                        this.stageNode.getComponent(PlayStageControlComponent).onStageFinished();\n                    }\n                    this.firstFrameOfInserted = false;\n                }\n\n                break;\n            }\n\n            case KnifeState.STATE_BOUNCE_BACK: {\n                if (this.hasAddedToBoardNode) {\n                    let backgroundNode = this.stageNode.getComponent(PlayStageControlComponent).backgroundNode;\n                    let worldPosition = this.node.parent.convertToWorldSpaceAR(this.node.position);\n\n                    this.node.removeFromParent();\n                    backgroundNode.addChild(this.node, -1);\n                    this.node.setPosition(this.node.parent.convertToNodeSpaceAR(worldPosition));\n                    this.hasAddedToBoardNode = false;\n                }\n\n                this.node.group = \"default\";\n                this.node.setAnchorPoint(0.5, 0.5);\n                let worldPos: cc.Vec2 = this.stageNode.getChildByName(NODE_NAME_BACKGROUND).convertToWorldSpaceAR(\n                    new cc.Vec2(this.node.getPositionX(), this.node.getPositionY()));\n                let nextPos: cc.Vec2 = this.stageNode.getChildByName(NODE_NAME_BACKGROUND).convertToNodeSpaceAR(\n                    new cc.Vec2(\n                        worldPos.x + this.flyingSpeed * Math.cos(this.bounceAngle / 360 * 2 * Math.PI) * dt,\n                        worldPos.y - this.flyingSpeed * Math.sin(this.bounceAngle / 360 * 2 * Math.PI) * dt));\n                this.node.setPosition(nextPos);\n                this.node.rotation = this.node.rotation + Math.random() * 3000 * dt;\n\n                if (this.node.getPositionY() < -1500) {\n                    this.state = KnifeState.STATE_HIDDEN;\n                    this.stageNode.getComponent(PlayStageControlComponent).onStageFailed();\n                }\n                break;\n            }\n\n            case KnifeState.STATE_ROTATING: {\n                this.node.rotation += (Math.random() * 100 + 400) * dt;\n                this.rotateTime += dt;\n                if (this.rotateTime >= this.totalRotateTime) {\n                    this.state = KnifeState.STATE_FALLING;\n                }\n                break;\n            }\n\n            case KnifeState.STATE_FALLING: {\n                this.node.rotation += 500 * dt;\n                this.node.setPositionY(this.node.getPositionY() - 3000 * dt);\n                if (this.node.getPositionY() < -1500) {\n                    this.state = KnifeState.STATE_HIDDEN;\n                    this.stageNode.getComponent(PlayStageControlComponent).onKnifeFall();\n                }\n                break;\n            }\n        }\n    }\n\n    public setLastKnife(isLastKnife): void {\n        this.isLastKnife = isLastKnife;\n    }\n\n    public ready(): void {\n        cc.log(\"ready, position =\", this.node.position.toString());\n\n        if (this.state == KnifeState.STATE_HIDDEN) {\n            this.state = KnifeState.STATE_READYING;\n\n            this.remainDeltaOpacity = 255;\n            this.remainFlyingDistance = READY_ANIMATION_FLYING_DISTANCE;\n        }\n    }\n\n    public startFalling(): void {\n        this.state = KnifeState.STATE_ROTATING;\n\n        this.node.setAnchorPoint(0.5, 0.5);\n        this.node.setPositionX(this.node.getPositionX() + (Math.random() - 0.5) * 500);\n        this.node.setPositionY(this.node.getPositionY() + (Math.random() - 0.5) * 500);\n    }\n\n    public addToBoard(resourceUrl: string, angle: number): void {\n        ResourceUtil.loadSpriteRes(resourceUrl, (error: Error, resource: cc.SpriteFrame) => {\n            this.node.getComponent(cc.Sprite).spriteFrame = resource;\n        });\n\n        this.node.group = \"knife\";\n        this.boardContainerNode.addChild(this.node, -1);\n\n        let length: number = this.boardContainerNode.getChildByName(NODE_NAME_BOARD).width / 2 + (this.knifeRealLength - this.knifeInsertLength);\n        this.node.position = new cc.Vec2((length) * Math.sin(angle / 360 * 2 * Math.PI), -length * Math.cos(angle / 360 * 2 * Math.PI));\n        this.node.rotation = -angle;\n    }\n\n    public throw(toPosY: number): boolean {\n        if (this.throwable && this.state != KnifeState.STATE_HIDDEN) {\n            this.throwable = false;\n            this.state = KnifeState.STATE_FLYING;\n\n            this.remainFlyingDistance = toPosY - this.node.position.y;\n            this.flyingSpeed = Math.max(1000, this.remainFlyingDistance / FLYING_DURATION);\n\n            this.node.group = \"knife\";\n            return true;\n        }\n\n        return false;\n    }\n\n    private goAhead(distance: number): void {\n        this.currentGoAheadDistance = distance;\n\n        if (Math.abs(this.node.rotation) < EPS) {\n            this.node.setPosition(this.node.position.x, this.node.position.y + distance);\n        } else {\n            let dtX = distance * Math.sin(this.node.rotation * Math.PI / 180);\n            let dtY = distance * Math.cos(this.node.rotation * Math.PI / 180);\n\n            this.node.setPosition(this.node.position.x + dtX, this.node.position.y + dtY);\n        }\n    }\n\n    private goBack(distance: number): void {\n        if (Math.abs(this.node.rotation) < EPS) {\n            this.node.setPosition(this.node.position.x, this.node.position.y - distance);\n        } else {\n            let dtX = distance * Math.sin(this.node.rotation * Math.PI / 180);\n            let dtY = distance * Math.cos(this.node.rotation * Math.PI / 180);\n\n            this.node.setPosition(this.node.position.x - dtX, this.node.position.y - dtY);\n        }\n    }\n\n    private insertIntoBoard(): void {\n        if (this.boardContainerNode) {\n            let worldPosition = this.node.parent.convertToWorldSpaceAR(this.node.position);\n\n            this.node.removeFromParent();\n            this.boardContainerNode.addChild(this.node, -1);\n            this.node.rotation = -this.boardContainerNode.rotation;\n            this.node.setPosition(this.node.parent.convertToNodeSpaceAR(worldPosition));\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        if (self.node.getComponent(KnifeControlComponent).state == KnifeState.STATE_INSERTED) {\n            return;\n        }\n\n        if (other.tag == TAG_KNIFE_HEAD && self.tag == TAG_KNIFE_HEAD) {\n            return;\n        }\n\n        if (other.tag == TAG_APPLE && self.tag == TAG_KNIFE_HEAD) {\n            return;\n        }\n\n        if (self.tag == TAG_KNIFE_HEAD) {\n            //用于碰撞后刀子退回\n            // let selfWorld = self.world;\n            // let otherWorld = other.world;\n\n            // if (selfWorld && otherWorld) {\n\n            //     let selfPoints = selfWorld.points;\n            //     let otherPoints = otherWorld.points;\n\n            //     if (selfPoints instanceof Array && otherPoints instanceof Array) {\n            //         let i = 1, j = 0;\n            //         for (; i < this.currentGoAheadDistance; i += 3) {\n            //             j = 0;\n            //             for (; j < selfPoints.length; j++) {\n            //                 selfPoints[j].set(new cc.Vec2(selfPoints[j].x, selfPoints[j].y - 3));\n            //             }\n            //             if (!cc.Intersection.polygonPolygon(selfPoints, otherPoints)) {\n            //                 break;\n            //             }\n            //         }\n            //         i = Math.min(this.currentGoAheadDistance, i);\n            //         this.goBack(i);\n            //     }\n            // }\n            this.node.group = GROUP_NAME_DEFAULT;\n            \n            this.state = KnifeState.STATE_BOUNCE_BACK;\n            this.remainFlyingDistance = 2000;\n            this.flyingSpeed = 3000;\n\n            if (StorageUtils.shared.getBoolean(Constants.KEY_SOUND_SWITCH, true)) {\n                cc.audioEngine.playEffect(this.knifeHitAudio, false);\n            }\n\n            if (StorageUtils.shared.getBoolean(Constants.KEY_VIBRATION_SWITCH, true)) {\n                JSInterfaceUtils.vibrate(300.1);\n            }\n\n            let otherPos: cc.Vec2 = new cc.Vec2(other.node.getPositionX(), other.node.getPositionY());\n            otherPos = this.boardContainerNode.convertToWorldSpaceAR(otherPos);\n            let boardPos: cc.Vec2 = this.stageNode.convertToWorldSpaceAR(this.boardContainerNode.getPosition());\n            let otherAngle = Math.atan((otherPos.x - boardPos.x) / (otherPos.y - boardPos.y) * 360 / 2 / Math.PI);\n            this.bounceAngle = 90 - 10 * otherAngle;\n            this.boardContainerNode.getComponent(BoardControlComponent).stopRotation();\n        }\n    }\n}\n"]}