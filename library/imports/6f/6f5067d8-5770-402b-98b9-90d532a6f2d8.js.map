{"version":3,"sources":["../../../../../assets/script/Utils/assets/script/Utils/StorageUtils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/script/Utils","sourcesContent":["import * as localForage from \"./localforage\";\n\nconst BOOL_VALUE_TRUE = \"true\";\nconst BOOL_VALUE_FALSE = \"false\";\n\nexport default class StorageUtils {\n\n    private static sharedInstance: StorageUtils;\n\n    private cache = {};\n\n    private hasInited: boolean = false;\n\n    public static get shared(): StorageUtils {\n        if (!this.sharedInstance) {\n            this.sharedInstance = new StorageUtils();\n        }\n        return this.sharedInstance;\n    }\n\n    private constructor() {\n        // @ts-ignore\n        window.LocalForage = localForage;\n        // @ts-ignore\n        window.StorageUtils = StorageUtils;\n    }\n\n    public init(callback): void {\n        localForage.iterate((value: string, key: string, iterationNumber: number) => {\n            this.cache[key] = value;\n        }, () => {\n            this.hasInited = true;\n            callback();\n        });\n    }\n\n    public getBoolean(key: string, defaultValue?: boolean): boolean {\n        let item: string = this.getItem(key);\n\n        if (item == null) {\n            return this.valueOrDefault(defaultValue, false);\n        }\n\n        return this.getItem(key) === BOOL_VALUE_TRUE;\n    }\n\n    public putBoolean(key: string, value: boolean): void {\n        this.putItem(key, value ? BOOL_VALUE_TRUE : BOOL_VALUE_FALSE);\n    }\n\n    public getInt(key: string, defaultValue?: number): number {\n        let item: string = this.getItem(key);\n\n        if (item == null) {\n            return this.valueOrDefault(defaultValue, 0);\n        }\n\n        let value = parseInt(item);\n        return isNaN(value) ? this.valueOrDefault(defaultValue, 0) : value;\n    }\n\n    public putInt(key: string, value: number): void {\n        this.putItem(key, String(value));\n    }\n\n    public getString(key: string, defaultValue?: string): string {\n        let item: string = this.getItem(key);\n\n        if (item == null) {\n            return this.valueOrDefault(defaultValue, \"\");\n        }\n\n        return item;\n    }\n\n    public putString(key: string, value: string): void {\n        this.putItem(key, value);\n    }\n\n    public getJSON(key: string): any {\n        return JSON.parse(this.getItem(key));\n    }\n\n    public putJSON(key: string, jsonObj: any): void {\n        this.putItem(key, JSON.stringify(jsonObj));\n    }\n\n    public removeItem(key): void {\n        this.checkInited();\n\n        delete this.cache[key];\n        localForage.removeItem(key);\n    }\n\n    public clearCache() {\n        this.checkInited();\n\n        this.cache = {};\n    }\n\n    private valueOrDefault(value: any, defaultValue: any): any {\n        if (value == null) {\n            return defaultValue;\n        }\n        return value;\n    }\n\n    private putItem(key: string, value: string): void {\n        this.checkInited();\n\n        this.cache[key] = value;\n        localForage.setItem(key, value);\n    }\n\n    private getItem(key): string | null {\n        this.checkInited();\n\n        if (key in this.cache) {\n            return this.cache[key];\n        } else {\n            return null;\n        }\n    }\n\n    private checkInited(): void {\n        if (!this.hasInited) {\n            cc.error(\"do not user StorageUtils before init completed!!!!\");\n        }\n    }\n\n}\n\nStorageUtils.shared;\n"]}