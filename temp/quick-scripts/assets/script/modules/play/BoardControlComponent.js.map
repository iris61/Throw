{"version":3,"sources":["BoardControlComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/script/modules/play","sourcesContent":["export const NODE_NAME_BOARD = \"board\";\n\nconst NODE_NAME_WHITE_BOARD = \"white_board\";\n\nconst DURATION_SHAKE = 0.1;\nconst STRENGTH_SHAKE = 15;\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BoardControlComponent extends cc.Component {\n    private rotation: {\n        targetSpeed: number,\n        interpolator: string,\n        interval: number\n    }[] = [];\n\n    private posX: number = 0;\n    private posY: number = 0;\n\n    private rotationInterval: number = 0;\n    private rotationSpeed: number = 0;\n    private totalRotationTime: number = 0;\n\n    private shakeDuration: number = 0;\n    private totalTwinkleTime: number = 0;\n\n    private rotationEnable: boolean = false;\n    private twinkleEnable: boolean = false;\n\n    onLoad() {\n        this.posX = this.node.getPositionX();\n        this.posY = this.node.getPositionY();\n    }\n\n    start() {\n    }\n\n    update(dt) {\n        if (this.rotationEnable) {\n            this.totalRotationTime += dt;\n\n            let currentIntervalSum: number = 0;\n            let currentIntervalIndex = 0;\n            for (; currentIntervalIndex < this.rotation.length; currentIntervalIndex++) {\n                currentIntervalSum += this.rotation[currentIntervalIndex].interval;\n                if (this.totalRotationTime % this.rotationInterval < currentIntervalSum) {\n                    break;\n                }\n            }\n\n            if (this.rotation[currentIntervalIndex].interpolator == \"linear\" &&\n                this.rotation[currentIntervalIndex].interval != 0) {\n                this.rotationSpeed =\n                    this.rotation[currentIntervalIndex].targetSpeed - (currentIntervalIndex == 0 ? 0 : this.rotation[currentIntervalIndex - 1].targetSpeed) *\n                    (this.totalRotationTime % this.rotationInterval + this.rotation[currentIntervalIndex].interval - currentIntervalSum) /\n                    this.rotation[currentIntervalIndex].interval;\n            } else {\n                //fixed\n                this.rotationSpeed = this.rotation[currentIntervalIndex].targetSpeed;\n            }\n\n            this.node.rotation += this.rotationSpeed * dt;\n        }\n\n        // if (this.twinkleEnable) {\n        //     if (this.totalTwinkleTime > this.shakeDuration) {\n        //         this.twinkleEnable = false;\n        //         this.node.getChildByName(NODE_NAME_WHITE_BOARD).opacity = 0;\n        //         return;\n        //     }\n\n        //     this.node.getChildByName(NODE_NAME_WHITE_BOARD).opacity = 255 * this.totalTwinkleTime * 3;\n        //     this.totalTwinkleTime += dt;\n        // }\n    }\n\n    public startRotation(): void {\n        this.rotationEnable = true;\n    }\n\n    public stopRotation(): void {\n        this.rotationEnable = false;\n    }\n\n    public onKnifeInserted(): void {\n        this.shakeDuration = DURATION_SHAKE;\n        this.startShake(STRENGTH_SHAKE);\n\n        this.totalTwinkleTime = 0;\n        this.twinkleEnable = true;\n    }\n\n    public setRotationSpeed(rotation: { targetSpeed: number, interpolator: string, interval: number }[]): void {\n        this.rotation = rotation;\n        this.totalRotationTime = 0;\n        this.rotationInterval = 0;\n        for (let i = 0; i < this.rotation.length; i++) {\n            this.rotationInterval += this.rotation[i].interval;\n        }\n    }\n\n    private startShake(strength: number): void {\n        // let shake: cc.ActionInterval = cc.sequence(\n        //     cc.moveTo(this.shakeDuration, this.posX, this.posY + strength).easing(cc.easeBounceOut()),\n        //     cc.moveTo(this.shakeDuration, this.posX, this.posY));\n\n        // this.node.runAction(shake);\n    }\n}\n"]}